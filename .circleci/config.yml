version: 2.1

orbs:
  python: circleci/python@1.4.0


executors:
  docker-publisher:
    environment:
      IMAGE_NAME: eu.gcr.io/hummingbird-technologies/platform/hb-platform-user-management
    docker:
      - image: circleci/buildpack-deps:buster
    resource_class: medium

  cloud-sdk:
    description: The docker container to use when running GCP-GCS commands
    environment:
      IMAGE_NAME: eu.gcr.io/hummingbird-technologies/platform/hb-platform-user-management
    docker:
      - image: google/cloud-sdk:alpine

  tests-runner:
    docker:
      - image: cimg/python:3.10.0
      - image: cimg/postgres:13.4
        environment:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
    resource_class: medium
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: localhost
      DATABASE_URL: postgresql://postgres:password@localhost:5432/postgres
      ACCOUNTS_BASE_URL: https://accounts.staging.hummingbird.com
      GCP_API_KEY: "secret"


commands:
  update-poetry:
    steps:
      - run:
          name: Update Poetry version
          command: |
            poetry self update


jobs:
  build:
    docker:
      - image: cimg/python:3.10.0
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.14
      - update-poetry
      - python/install-packages:
          pkg-manager: poetry
          args: -vvv
      - run: poetry build
      - run: docker build --ssh default --progress=plain -t $IMAGE_NAME:latest .
      - run: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - image.tar
    environment:
      IMAGE_NAME: eu.gcr.io/hummingbird-technologies/platform/hb-platform-user-management
      DOCKER_BUILDKIT: 1
      GIT_COMMIT: $CIRCLE_SHA1

  test:
    executor: tests-runner
    environment:
      GOOGLE_PROJECT_ID: << parameters.project_id >>
    parameters:
      project_id:
        type: string
    steps:
      - checkout
      - update-poetry
      - python/install-packages:
          pkg-manager: poetry
          args: -vvv
      - run:
          command: poetry install
          name: Install code analysis and test dependencies
      - run:
          command: poetry run black --line-length=100 --check .
          name: Coding style checks
      - run:
          command: poetry run pylint user_management/ tests/ --rcfile=.pylintrc
          name: Code QA analysis
      - run:
          command: poetry run mypy user_management/
          name: Static type checks
      - run:
          command: |
            poetry run pytest \
              --verbose \
              --junitxml=$HOME/test-results/junit.xml \
              --cov=farm_management \
              --cov-report=html:$HOME/test-results/coverage.html
          name: Run tests
      - store_test_results:
          path: results
      - store_artifacts:
          path: $HOME/test-results/coverage.html
          destination: coverage-metrics

  test-alembic-migrations:
    executor: tests-runner
    environment:
      GOOGLE_PROJECT_ID: << parameters.project_id >>
    parameters:
      project_id:
        type: string
    steps:
      - checkout
      - update-poetry
      - python/install-packages:
          pkg-manager: poetry
          args: -vvv
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          command: |
            num_heads=$(poetry run alembic heads | wc -l)
            if [[ $num_heads > 1 ]]; then
              echo "Only a single head is allowed to reduce complexity"
              exit 1
            fi
          name: Check single head
      - run:
          command: |
            head=$(poetry run alembic history | sed -n 's/^\(\w\+\|<base>\) -> \(\w\+\) (head).*.*/\2/p')
            poetry run alembic upgrade $head
          name: Full upgrade
      - run:
          command: |
            base=$(poetry run alembic history | sed -n 's/^<base> -> \(\w\+\).*/\1/p')
            poetry run alembic downgrade $base
          name: Full downgrade

  push-docker-image:
    executor: docker-publisher
    environment:
      PIPELINE_NUMBER: << pipeline.number >>
    parameters:
      env:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          command: docker load -i /tmp/workspace/image.tar
          name: Load image from workspace
      - run:
          command: |
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CIRCLE_SHA1
            docker tag $IMAGE_NAME:$CIRCLE_SHA1 $IMAGE_NAME:<< parameters.env >>-$PIPELINE_NUMBER
            docker tag $IMAGE_NAME:$CIRCLE_SHA1 $IMAGE_NAME:<< parameters.env >>
          name: Tag image
      - run:
          command: echo $GSA_KEY | docker login -u _json_key --password-stdin https://eu.gcr.io
          name: Log in to Google Container Registry
      - run:
          command: docker push $IMAGE_NAME
          name: Push image

  deploy:
    executor: cloud-sdk
    environment:
      GOOGLE_PROJECT_ID: << parameters.project_id >>
    parameters:
      env:
        type: string
      project_id:
        type: string
    steps:
      - checkout
      - run:
          command: |
            echo $GSA_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          name: Authenticate gcloud
      - run:
          command: |
            gcloud run deploy user-management-api \
              --platform managed \
              --region=europe-west1 \
              --allow-unauthenticated \
              --image ${IMAGE_NAME}:<< parameters.env >>
          name: Deploy to Google Cloud Run


workflows:
  main:
    jobs:
      - build
      - test-alembic-migrations:
          project_id: hbt-staging
          requires:
            - build
      - test:
          project_id: hbt-staging
          requires:
            - test-alembic-migrations

      # Staging
      - push-docker-image:
          name: push-docker-image-staging
          env: staging
          requires:
            - test
          context:
            - gcp-secrets
          filters:
            branches:
              only: main
      - deploy:
          name: deploy-cloud-run-staging
          project_id: hbt-staging
          env: staging
          requires:
            - push-docker-image-staging
          context:
            - gcp-secrets
          filters:
            branches:
              only: main

      # Production
      - hold:
          type: approval
          requires:
            - test
          filters:
            branches:
              only: main
      - push-docker-image:
          name: push-docker-image-production
          env: prod
          requires:
            - hold
          context:
            - gcp-secrets
          filters:
            branches:
              only: main
      - deploy:
          name: deploy-cloud-run-production
          project_id: hummingbirdtech-production
          env: prod
          requires:
            - push-docker-image-production
          context:
            - gcp-secrets
          filters:
            branches:
              only: main
