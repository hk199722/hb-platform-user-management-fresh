version: 2.1

orbs:
  python: circleci/python@1.4.0


executors:
  docker-publisher:
    environment:
      IMAGE_NAME: eu.gcr.io/hummingbird-technologies/platform/hb-platform-user-management
    docker:
      - image: cimg/base:stable
    resource_class: medium

  cloud-sdk:
    description: The docker container to use when running GCP-GCS commands
    environment:
      IMAGE_NAME: eu.gcr.io/hummingbird-technologies/platform/hb-platform-user-management
    docker:
      - image: google/cloud-sdk:alpine

  tests-runner:
    docker:
      - image: cimg/python:3.10.0
      - image: cimg/postgres:13.4
        environment:
          POSTGRES_DB: user_management
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
    resource_class: medium
    environment:
      DATABASE_URL: postgresql://postgres:password@localhost:5432/postgres
      ACCOUNTS_BASE_URL: https://accounts.test.hummingbird.com
      GCP_API_KEY: secret
      ENCRYPT_SALT: dummyencryptsalt123456
      GOOGLE_PROJECT_ID: hb-test

commands:
  update-poetry:
    steps:
      - run:
          name: Update Poetry version
          command: |
            poetry self update


jobs:
  build:
    docker:
      - image: cimg/python:3.10.0
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - update-poetry
      - python/install-packages:
          pkg-manager: poetry
          args: -vvv
      - run: poetry build
      - run: docker build --build-arg RELEASE_COMMIT=$CIRCLE_SHA1 --ssh default --progress=plain -t $IMAGE_NAME:latest .
      - run: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - image.tar
    environment:
      IMAGE_NAME: eu.gcr.io/hummingbird-technologies/platform/hb-platform-user-management
      DOCKER_BUILDKIT: 1

  test:
    executor: tests-runner
    environment:
      GOOGLE_PROJECT_ID: << parameters.project_id >>
    parameters:
      project_id:
        type: string
    steps:
      - checkout
      - update-poetry
      - python/install-packages:
          pkg-manager: poetry
          args: -vvv
      - run:
          command: poetry install
          name: Install code analysis and test dependencies
      - run:
          command: poetry run black --line-length=100 --check .
          name: Coding style checks
      - run:
          command: poetry run pylint user_management/ tests/ --rcfile=.pylintrc
          name: Code QA analysis
      - run:
          command: poetry run mypy user_management/
          name: Static type checks
      - run:
          command: |
            poetry run pytest \
              --verbose \
              --junitxml=$HOME/test-results/junit.xml \
              --cov=farm_management \
              --cov-report=html:$HOME/test-results/coverage.html
          name: Run tests
      - store_test_results:
          path: results
      - store_artifacts:
          path: $HOME/test-results/coverage.html
          destination: coverage-metrics

  test-alembic-migrations:
    executor: tests-runner
    environment:
      GOOGLE_PROJECT_ID: << parameters.project_id >>
    parameters:
      project_id:
        type: string
    steps:
      - checkout
      - update-poetry
      - python/install-packages:
          pkg-manager: poetry
          args: -vvv
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          command: |
            num_heads=$(poetry run alembic heads | wc -l)
            if [[ $num_heads > 1 ]]; then
              echo "Only a single head is allowed to reduce complexity"
              exit 1
            fi
          name: Check single head
      - run:
          command: |
            head=$(poetry run alembic history | sed -n 's/^\(\w\+\|<base>\) -> \(\w\+\) (head).*.*/\2/p')
            poetry run alembic upgrade $head
          name: Full upgrade
      - run:
          command: |
            base=$(poetry run alembic history | sed -n 's/^<base> -> \(\w\+\).*/\1/p')
            poetry run alembic downgrade $base
          name: Full downgrade

  push-docker-image:
    executor: docker-publisher
    environment:
      PIPELINE_NUMBER: << pipeline.number >>
    parameters:
      env:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          command: docker load -i /tmp/workspace/image.tar
          name: Load image from workspace
      - run:
          command: |
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CIRCLE_SHA1
            docker tag $IMAGE_NAME:$CIRCLE_SHA1 $IMAGE_NAME:<< parameters.env >>-$PIPELINE_NUMBER
            docker tag $IMAGE_NAME:$CIRCLE_SHA1 $IMAGE_NAME:<< parameters.env >>
          name: Tag image
      - run:
          command: echo $GSA_KEY | docker login -u _json_key --password-stdin https://eu.gcr.io
          name: Log in to Google Container Registry
      - run:
          command: docker push --all-tags $IMAGE_NAME
          name: Push image

  deploy:
    executor: cloud-sdk
    environment:
      GOOGLE_PROJECT_ID: << parameters.project_id >>
      SENTRY_ORG: hummingbird-technologies
      SENTRY_PROJECT: user-management
      SENTRY_ENVIRONMENT: << parameters.project_id >>
    parameters:
      env:
        type: string
      project_id:
        type: string
    steps:
      - checkout
      - run:
          command: |
            echo $GSA_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          name: Authenticate gcloud
      - run:
          command: |
            gcloud run deploy user-management-api \
              --platform managed \
              --region=europe-west1 \
              --allow-unauthenticated \
              --image ${IMAGE_NAME}:<< parameters.env >>
          name: Deploy to Google Cloud Run

  notify-sentry:
    executor: docker-publisher
    environment:
      SENTRY_ORG: hummingbird-technologies
      SENTRY_PROJECT: user-management
      SENTRY_ENVIRONMENT: << parameters.project_id >>
    parameters:
      project_id:
        type: string
    steps:
      - checkout
      - run:
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT
          name: Create release and notify Sentry of deploy

  run-db-migrations:
    executor: cloud-sdk
    environment:
      GOOGLE_PROJECT_ID: << parameters.project_id >>
      ACCOUNTS_BASE_URL: << parameters.accounts_url >>
      GCP_API_KEY: "not-a-real-gcp-key"
      ENCRYPT_SALT: "1234567890abcdef123456"
    parameters:
      project_id:
        type: string
      accounts_url:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          command: docker load -i /tmp/workspace/image.tar
          name: Load Docker image from workspace
      - run:
          command: |
            echo "$GSA_KEY" > "$HOME"/gcloud.json
            docker create -v /config --name configs alpine:3.4 /bin/true
            docker cp "$HOME"/gcloud.json configs:/config
          name: Set up Cloud SQL Proxy credentials
      - when:
          condition:
            equal: [ hbt-staging, << parameters.project_id >> ]
          steps:
            - run:
                command: |
                  echo 'export SQL_CONNECTION=${STAGING_SQL_CONNECTION}' >> $BASH_ENV
                  echo 'export DB=${STAGING_DB}' >> $BASH_ENV
                  echo 'export ACCOUNTS_BASE_URL=${ACCOUNTS_BASE_URL}' >> $BASH_ENV
                  echo 'export GCP_API_KEY=${GCP_API_KEY}' >> $BASH_ENV
                  echo 'export ENCRYPT_SALT=${ENCRYPT_SALT}' >> $BASH_ENV
                  source $BASH_ENV
                name: Set up target environment (Staging DB)
      - when:
          condition:
            equal: [ hummingbirdtech-production, << parameters.project_id >> ]
          steps:
            - run:
                command: |
                  echo 'export SQL_CONNECTION=${PRODUCTION_SQL_CONNECTION}' >> $BASH_ENV
                  echo 'export DB=${PRODUCTION_DB}' >> $BASH_ENV
                  echo 'export ACCOUNTS_BASE_URL=${ACCOUNTS_BASE_URL}' >> $BASH_ENV
                  echo 'export GCP_API_KEY=${GCP_API_KEY}' >> $BASH_ENV
                  echo 'export ENCRYPT_SALT=${ENCRYPT_SALT}' >> $BASH_ENV
                  source $BASH_ENV
                name: Set up target environment (Production DB)
      - run:
          command: |
            docker run \
              -d \
              --name cloud-sql-proxy \
              --volumes-from configs \
              -p 127.0.0.1:5433:5433 \
              gcr.io/cloudsql-docker/gce-proxy:1.30.0 /cloud_sql_proxy \
              -instances=${SQL_CONNECTION}=tcp:0.0.0.0:5433 \
              -credential_file=/config/gcloud.json
          name: Start Cloud SQL Proxy
      - run:
          command: |
            docker run \
              --name user-management \
              --network container:cloud-sql-proxy \
              --env DATABASE_URL=${DB} \
              --env GOOGLE_PROJECT_ID=${GOOGLE_PROJECT_ID} \
              --env ACCOUNTS_BASE_URL=${ACCOUNTS_BASE_URL} \
              --env GCP_API_KEY=${GCP_API_KEY} \
              --env ENCRYPT_SALT=${ENCRYPT_SALT} \
              $IMAGE_NAME alembic upgrade head
          name: Run Alembic migrations


workflows:
  main:
    jobs:
      - build
      - test-alembic-migrations:
          project_id: hbt-staging
          requires:
            - build
      - test:
          project_id: hbt-staging
          requires:
            - build

      # Staging
      - push-docker-image:
          name: push-docker-image-staging
          env: staging
          requires:
            - test
            - test-alembic-migrations
          context:
            - gcp-secrets
          filters:
            branches:
              only: main
      - deploy:
          name: deploy-staging
          project_id: hbt-staging
          env: staging
          requires:
            - push-docker-image-staging
          context:
            - gcp-secrets
          filters:
            branches:
              only: main
      - notify-sentry:
          name: notify-sentry-staging
          project_id: hbt-staging
          requires:
            - deploy-staging
      - run-db-migrations:
          name: run-db-migrations-staging
          project_id: hbt-staging
          accounts_url: http://accounts.staging.hummingbirdtech.com
          requires:
            - deploy-staging
          context:
            - gcp-secrets

      # Production
      - hold:
          type: approval
          requires:
            - test
            - test-alembic-migrations
          filters:
            branches:
              only: main
      - push-docker-image:
          name: push-docker-image-production
          env: prod
          requires:
            - hold
          context:
            - gcp-secrets
          filters:
            branches:
              only: main
      - deploy:
          name: deploy-production
          project_id: hummingbirdtech-production
          env: prod
          requires:
            - push-docker-image-production
          context:
            - gcp-secrets
          filters:
            branches:
              only: main
      - notify-sentry:
          name: notify-sentry-production
          project_id: hummingbirdtech-production
          requires:
            - deploy-production
      - run-db-migrations:
          name: run-db-migrations-production
          project_id: hummingbirdtech-production
          accounts_url: https://accounts.hummingbirdtech.com
          requires:
            - deploy-production
          context:
            - gcp-secrets
